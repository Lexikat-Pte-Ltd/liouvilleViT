
--- Epoch 1/100 ---
Batch shape: torch.Size([1, 10000, 2, 50, 50])
MaskedBlockViT.forward called
  x_blocks shape: torch.Size([1, 10000, 2, 50, 50])
  CNNBlockEncoder input shape: torch.Size([10000, 2, 50, 50])
  CNNBlockEncoder output shape: torch.Size([10000, 128])
  x_emb shape after encoder and view: torch.Size([1, 10000, 128])
  x_emb shape after adding pos_embed_2d: torch.Size([1, 10000, 128])
  x_masked shape: torch.Size([1, 7000, 128])
  ids_keep shape: torch.Size([1, 7000])
  ids_mask shape: torch.Size([1, 3000])
  ids_restore shape: torch.Size([1, 10000])
  encoded shape after transformer: torch.Size([1, 7000, 128])
  decoder_input shape: torch.Size([1, 10000, 128])
  linear_decoded shape: torch.Size([1, 10000, 10816])
  conv_input shape: torch.Size([10000, 64, 13, 13])
  pred_flat_conv shape: torch.Size([10000, 2, 52, 52])
  Cropping pred_flat_conv from torch.Size([10000, 2, 52, 52]) to (2, 50, 50)
x_blocks.shape: torch.Size([1, 10000, 50, 50, 2])
Traceback (most recent call last):
  File "/media/cc/2T/liouvilleViT/train_masked_blocks.py", line 172, in <module>
    run_training()
  File "/media/cc/2T/liouvilleViT/train_masked_blocks.py", line 137, in run_training
    loss.backward()
  File "/home/cc/.pyenv/versions/3.10.12/lib/python3.10/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/home/cc/.pyenv/versions/3.10.12/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/cc/.pyenv/versions/3.10.12/lib/python3.10/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.22 GiB. GPU 0 has a total capacity of 23.51 GiB of which 714.81 MiB is free. Including non-PyTorch memory, this process has 22.59 GiB memory in use. Of the allocated memory 22.10 GiB is allocated by PyTorch, and 40.86 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
